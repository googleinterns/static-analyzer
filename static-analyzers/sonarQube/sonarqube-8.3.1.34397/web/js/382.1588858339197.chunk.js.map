{"version":3,"sources":["webpack:///./node_modules/lodash/differenceBy.js","webpack:///./src/main/js/apps/overview/pullRequests/AfterMergeEstimate.tsx","webpack:///./src/main/js/apps/overview/pullRequests/LargeQualityGateBadge.tsx","webpack:///./src/main/js/apps/overview/pullRequests/PullRequestOverview.tsx"],"names":["baseDifference","baseFlatten","baseIteratee","baseRest","isArrayLikeObject","last","differenceBy","array","values","iteratee","undefined","module","exports","className","measures","type","afterMergeMetric","measure","value","component","level","success","path","qualityGate","key","failed","overlay","defaultMessage","id","link","to","fill","transparentWhite","size","mounted","state","loading","conditionsHaveChanged","prevProps","prevConditions","conditions","newConditions","props","diff","filter","c","length","fetchBranchStatusData","branchLike","fetchBranchStatus","fetchBranchData","setState","metricKeys","map","then","metrics","componentDidMount","this","componentDidUpdate","componentWillUnmount","render","ignoredConditions","status","failedConditions","condition","Alert","display","variant","DocTooltip","doc","QualityGateConditions","collapsible","Bug","Vulnerability","SecurityHotspot","CodeSmell","IssueLabel","useDiffMetric","IssueRating","Coverage","Duplication","MeasurementLabel","mapDispatchToProps"],"mappings":"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","file":"js/382.1588858339197.chunk.js","sourcesContent":["var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseIteratee = require('./_baseIteratee'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.difference` except that it accepts `iteratee` which\n * is invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n * // => [{ 'x': 2 }]\n */\nvar differenceBy = baseRest(function(array, values) {\n  var iteratee = last(values);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))\n    : [];\n});\n\nmodule.exports = differenceBy;\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { findMeasure } from '../../../helpers/measures';\nimport { getMeasurementAfterMergeMetricKey, MeasurementType } from '../utils';\n\nexport interface AfterMergeEstimateProps {\n  className?: string;\n  measures: T.MeasureEnhanced[];\n  type: MeasurementType;\n}\n\nexport function AfterMergeEstimate({ className, measures, type }: AfterMergeEstimateProps) {\n  const afterMergeMetric = getMeasurementAfterMergeMetricKey(type);\n\n  const measure = findMeasure(measures, afterMergeMetric);\n\n  if (!measure || measure.value === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(className, 'display-flex-center')}>\n      <span className=\"huge\">{formatMeasure(measure.value, 'PERCENT')}</span>\n      <span className=\"label flex-1 spacer-left text-right\">\n        {translate('component_measures.facet_category.overall_category.estimated')}\n      </span>\n    </div>\n  );\n}\n\nexport default React.memo(AfterMergeEstimate);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport HelpIcon from 'sonar-ui-common/components/icons/HelpIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getQualityGatesUrl, getQualityGateUrl } from '../../../helpers/urls';\n\ninterface Props {\n  component: T.Component;\n  level?: T.Status;\n}\n\nexport function LargeQualityGateBadge({ component, level }: Props) {\n  const success = level === 'OK';\n\n  const path =\n    component.qualityGate === undefined\n      ? getQualityGatesUrl()\n      : getQualityGateUrl(component.qualityGate.key);\n\n  return (\n    <div\n      className={classNames('overview-quality-gate-badge-large small', {\n        failed: !success,\n        success\n      })}>\n      <div className=\"display-flex-center\">\n        <span>{translate('overview.on_new_code_long')}</span>\n\n        <HelpTooltip\n          className=\"little-spacer-left\"\n          overlay={\n            <FormattedMessage\n              defaultMessage={translate('overview.quality_gate.conditions_on_new_code')}\n              id=\"overview.quality_gate.conditions_on_new_code\"\n              values={{\n                link: <Link to={path}>{translate('overview.quality_gate')}</Link>\n              }}\n            />\n          }>\n          <HelpIcon fill={colors.transparentWhite} size={12} />\n        </HelpTooltip>\n      </div>\n      {level !== undefined && (\n        <h3 className=\"huge-spacer-top huge\">{translate('metric.level', level)}</h3>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(LargeQualityGateBadge);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { differenceBy, uniq } from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { isDefined } from 'sonar-ui-common/helpers/types';\nimport { getMeasuresWithMetrics } from '../../../api/measures';\nimport DocTooltip from '../../../components/docs/DocTooltip';\nimport { getBranchLikeQuery } from '../../../helpers/branch-like';\nimport { enhanceConditionWithMeasure, enhanceMeasuresWithMetrics } from '../../../helpers/measures';\nimport { fetchBranchStatus } from '../../../store/rootActions';\nimport { getBranchStatusByBranchLike, Store } from '../../../store/rootReducer';\nimport { BranchLike, PullRequest } from '../../../types/branch-like';\nimport { QualityGateStatusCondition } from '../../../types/quality-gates';\nimport IssueLabel from '../components/IssueLabel';\nimport IssueRating from '../components/IssueRating';\nimport MeasurementLabel from '../components/MeasurementLabel';\nimport QualityGateConditions from '../components/QualityGateConditions';\nimport '../styles.css';\nimport { IssueType, MeasurementType, PR_METRICS } from '../utils';\nimport AfterMergeEstimate from './AfterMergeEstimate';\nimport LargeQualityGateBadge from './LargeQualityGateBadge';\n\ninterface StateProps {\n  conditions?: QualityGateStatusCondition[];\n  ignoredConditions?: boolean;\n  status?: T.Status;\n}\n\ninterface DispatchProps {\n  fetchBranchStatus: (branchLike: BranchLike, projectKey: string) => void;\n}\n\ninterface OwnProps {\n  branchLike: PullRequest;\n  component: T.Component;\n}\n\ntype Props = StateProps & DispatchProps & OwnProps;\n\ninterface State {\n  loading: boolean;\n  measures: T.MeasureEnhanced[];\n}\n\nexport class PullRequestOverview extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  state: State = {\n    loading: false,\n    measures: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    if (this.props.conditions === undefined) {\n      this.fetchBranchStatusData();\n    } else {\n      this.fetchBranchData();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.conditionsHaveChanged(prevProps)) {\n      this.fetchBranchData();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  conditionsHaveChanged = (prevProps: Props) => {\n    const prevConditions = prevProps.conditions ?? [];\n    const newConditions = this.props.conditions ?? [];\n    const diff = differenceBy(\n      prevConditions.filter(c => c.level === 'ERROR'),\n      newConditions.filter(c => c.level === 'ERROR'),\n      c => c.metric\n    );\n\n    return (\n      (prevProps.conditions === undefined && this.props.conditions !== undefined) || diff.length > 0\n    );\n  };\n\n  fetchBranchStatusData = () => {\n    const {\n      branchLike,\n      component: { key }\n    } = this.props;\n    this.props.fetchBranchStatus(branchLike, key);\n  };\n\n  fetchBranchData = () => {\n    const {\n      branchLike,\n      component: { key },\n      conditions\n    } = this.props;\n\n    this.setState({ loading: true });\n\n    const metricKeys =\n      conditions !== undefined\n        ? // Also load metrics that apply to failing QG conditions.\n          uniq([...PR_METRICS, ...conditions.filter(c => c.level !== 'OK').map(c => c.metric)])\n        : PR_METRICS;\n\n    getMeasuresWithMetrics(key, metricKeys, getBranchLikeQuery(branchLike)).then(\n      ({ component, metrics }) => {\n        if (this.mounted && component.measures) {\n          this.setState({\n            loading: false,\n            measures: enhanceMeasuresWithMetrics(component.measures || [], metrics)\n          });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  render() {\n    const { branchLike, component, conditions, ignoredConditions, status } = this.props;\n    const { loading, measures } = this.state;\n\n    if (loading) {\n      return (\n        <div className=\"page page-limited\">\n          <i className=\"spinner\" />\n        </div>\n      );\n    }\n\n    if (conditions === undefined) {\n      return null;\n    }\n\n    const failedConditions = conditions\n      .filter(condition => condition.level === 'ERROR')\n      .map(c => enhanceConditionWithMeasure(c, measures))\n      .filter(isDefined);\n\n    return (\n      <div className=\"page page-limited\">\n        <div\n          className={classNames('pr-overview', {\n            'has-conditions': failedConditions.length > 0\n          })}>\n          {ignoredConditions && (\n            <Alert className=\"big-spacer-bottom\" display=\"inline\" variant=\"info\">\n              <span className=\"text-middle\">\n                {translate('overview.quality_gate.ignored_conditions')}\n              </span>\n              <HelpTooltip\n                className=\"spacer-left\"\n                overlay={translate('overview.quality_gate.ignored_conditions.tooltip')}\n              />\n            </Alert>\n          )}\n          <div className=\"display-flex-row\">\n            <div className=\"big-spacer-right\">\n              <h2 className=\"overview-panel-title spacer-bottom small\">\n                {translate('overview.quality_gate')}\n                <DocTooltip\n                  className=\"spacer-left\"\n                  doc={import(\n                    /* webpackMode: \"eager\" */ 'Docs/tooltips/quality-gates/project-homepage-quality-gate.md'\n                  )}\n                />\n              </h2>\n              <LargeQualityGateBadge component={component} level={status} />\n            </div>\n\n            {failedConditions.length > 0 && (\n              <div className=\"pr-overview-failed-conditions big-spacer-right\">\n                <h2 className=\"overview-panel-title spacer-bottom small\">\n                  {translate('overview.failed_conditions')}\n                </h2>\n                <QualityGateConditions\n                  branchLike={branchLike}\n                  collapsible={true}\n                  component={component}\n                  failedConditions={failedConditions}\n                />\n              </div>\n            )}\n\n            <div className=\"flex-1\">\n              <h2 className=\"overview-panel-title spacer-bottom small\">\n                {translate('overview.measures')}\n              </h2>\n\n              <div className=\"overview-panel-content\">\n                {[\n                  IssueType.Bug,\n                  IssueType.Vulnerability,\n                  IssueType.SecurityHotspot,\n                  IssueType.CodeSmell\n                ].map((type: IssueType) => (\n                  <div className=\"overview-measures-row display-flex-row\" key={type}>\n                    <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                      <IssueLabel\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                    <div className=\"overview-panel-big-padded overview-measures-aside display-flex-center\">\n                      <IssueRating\n                        branchLike={branchLike}\n                        component={component}\n                        measures={measures}\n                        type={type}\n                        useDiffMetric={true}\n                      />\n                    </div>\n                  </div>\n                ))}\n\n                {[MeasurementType.Coverage, MeasurementType.Duplication].map(\n                  (type: MeasurementType) => (\n                    <div className=\"overview-measures-row display-flex-row\" key={type}>\n                      <div className=\"overview-panel-big-padded flex-1 small display-flex-center\">\n                        <MeasurementLabel\n                          branchLike={branchLike}\n                          component={component}\n                          measures={measures}\n                          type={type}\n                          useDiffMetric={true}\n                        />\n                      </div>\n\n                      <AfterMergeEstimate\n                        className=\"overview-panel-big-padded overview-measures-aside text-right overview-measures-emphasis\"\n                        measures={measures}\n                        type={type}\n                      />\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store, { branchLike, component }: Props) => {\n  const { conditions, ignoredConditions, status } = getBranchStatusByBranchLike(\n    state,\n    component.key,\n    branchLike\n  );\n  return { conditions, ignoredConditions, status };\n};\n\nconst mapDispatchToProps = { fetchBranchStatus: fetchBranchStatus as any };\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(PullRequestOverview);\n"],"sourceRoot":""}