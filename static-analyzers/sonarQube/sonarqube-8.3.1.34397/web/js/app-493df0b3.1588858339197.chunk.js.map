{"version":3,"sources":["webpack:///./src/main/js/api/metrics.ts","webpack:///./src/main/js/api/news.ts","webpack:///./src/main/js/api/marketplace.ts","webpack:///./src/main/js/api/auth.ts","webpack:///./src/main/js/api/languages.ts","webpack:///./src/main/js/api/issues.ts","webpack:///./src/main/js/api/components.ts","webpack:///./src/main/js/api/users.ts","webpack:///./src/main/js/api/organizations.ts","webpack:///./src/main/js/api/quality-gates.ts","webpack:///./src/main/js/api/measures.ts","webpack:///./src/main/js/api/settings.ts"],"names":["getMetrics","data","catch","getAllMetrics","inner","prev","ps","then","r","result","metrics","concat","p","total","getMetricDomains","getMetricTypes","createMetric","updateMetric","deleteMetric","PRISMIC_API_URL","fetchPrismicRefs","response","master","refs","find","ref","id","Promise","reject","fetchPrismicNews","q","tag","push","access_token","accessToken","orderings","pageSize","results","fetchPrismicFeatureNews","fetchLinks","page","results_per_page","total_results_size","news","map","notification","publicationDate","publication_date","features","body","feature","categories","items","item","category","filter","Boolean","description","primary","readMore","read_more_link","url","paging","pageIndex","isValidLicense","showLicense","status","login","password","setMethod","setData","submit","basicCheckStatus","logout","resolve","getLanguages","searchIssues","query","getFacets","facets","join","additionalFields","getFacet","facet","values","searchIssueTags","getIssueChangelog","issue","addIssueComment","deleteIssueComment","editIssueComment","setIssueAssignee","setIssueSeverity","setIssueTags","setIssueTransition","setIssueType","bulkChangeIssues","issueKeys","issues","searchIssueAuthors","getIssueFlowSnippets","issueKey","Object","keys","forEach","k","sources","reduce","lineMap","line","coverageStatus","getComponents","parameters","bulkDeleteProjects","deleteProject","project","deletePortfolio","portfolio","key","createProject","searchProjectTags","setApplicationTags","setProjectTags","getComponentTree","strategy","component","additional","metricKeys","getChildren","getComponentLeaves","getComponent","getTree","getFiles","qualifiers","getDirectories","getComponentData","doesComponentExists","undefined","getComponentShow","getParents","getBreadcrumbs","reversedAncestors","ancestors","reverse","getMyProjects","searchProjects","changeKey","getSuggestions","recentlyBrowsed","more","s","getComponentForSourceViewer","getSources","getDuplications","changePassword","getUserGroups","getIdentityProviders","searchUsers","createUser","updateUser","scmAccount","length","deactivateUser","skipOnboarding","setHomePage","homepage","setUserSetting","setting","getOrganizations","getOrganization","organizations","o","getOrganizationNavigation","organization","updateOrganization","changes","deleteOrganization","searchMembers","addMember","removeMember","getOrganizationBilling","setOrganizationMemberSync","syncMembers","fetchQualityGates","fetchQualityGate","createQualityGate","deleteQualityGate","renameQualityGate","copyQualityGate","setQualityGateAsDefault","createCondition","updateCondition","deleteCondition","getGateForProject","qualityGate","isDefault","default","associateGateWithProject","dissociateGateWithProject","getApplicationQualityGate","getQualityGateProjectStatus","getMeasures","getMeasuresWithMetrics","branchParameters","getMeasuresWithPeriod","getMeasuresWithPeriodAndMetrics","getMeasuresForProjects","projectKeys","getCustomMeasures","customMeasures","createCustomMeasure","updateCustomMeasure","deleteCustomMeasure","getDefinitions","getValues","setSettingValue","definition","value","multiValues","type","fieldValues","fields","JSON","stringify","resetSettingValue","sendTestEmail","to","subject","message","checkSecretKey","generateSecretKey","encryptValue"],"mappings":"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","file":"js/app-493df0b3.1588858339197.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport interface MetricsResponse {\n  metrics: T.Metric[];\n  p: number;\n  ps: number;\n  total: number;\n}\n\nexport function getMetrics(data?: {\n  isCustom?: boolean;\n  p?: number;\n  ps?: number;\n}): Promise<MetricsResponse> {\n  return getJSON('/api/metrics/search', data).catch(throwGlobalError);\n}\n\nexport function getAllMetrics(data?: {\n  isCustom?: boolean;\n  p?: number;\n  ps?: number;\n}): Promise<T.Metric[]> {\n  return inner(data);\n\n  function inner(\n    data: { p?: number; ps?: number } = { ps: 500 },\n    prev?: MetricsResponse\n  ): Promise<T.Metric[]> {\n    return getMetrics(data).then(r => {\n      const result = prev ? prev.metrics.concat(r.metrics) : r.metrics;\n      if (r.p * r.ps >= r.total) {\n        return result;\n      }\n      return inner({ ...data, p: r.p + 1 }, { ...r, metrics: result });\n    });\n  }\n}\n\nexport function getMetricDomains(): Promise<string[]> {\n  return getJSON('/api/metrics/domains').then(r => r.domains, throwGlobalError);\n}\n\nexport function getMetricTypes(): Promise<string[]> {\n  return getJSON('/api/metrics/types').then(r => r.types, throwGlobalError);\n}\n\nexport function createMetric(data: {\n  description?: string;\n  domain?: string;\n  key: string;\n  name: string;\n  type: string;\n}): Promise<T.Metric> {\n  return postJSON('/api/metrics/create', data).catch(throwGlobalError);\n}\n\nexport function updateMetric(data: {\n  description?: string;\n  domain?: string;\n  id: string;\n  key?: string;\n  name?: string;\n  type?: string;\n}) {\n  return post('/api/metrics/update', data).catch(throwGlobalError);\n}\n\nexport function deleteMetric(data: { keys: string }) {\n  return post('/api/metrics/delete', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getCorsJSON } from 'sonar-ui-common/helpers/request';\n\ninterface PrismicRef {\n  id: string;\n  ref: string;\n}\n\nexport interface PrismicNews {\n  data: { title: string };\n  last_publication_date: string;\n  uid: string;\n}\n\ninterface PrismicResponse {\n  page: number;\n  results: PrismicResult[];\n  results_per_page: number;\n  total_results_size: number;\n}\n\ninterface PrismicResult {\n  data: {\n    notification: string;\n    publication_date: string;\n    body: PrismicResultFeature[];\n  };\n}\n\ninterface PrismicResultFeature {\n  items: Array<{\n    category: {\n      data: {\n        color: string;\n        name: string;\n      };\n    };\n  }>;\n  primary: {\n    description: string;\n    read_more_link: {\n      url?: string;\n    };\n  };\n}\n\nexport interface PrismicFeatureNews {\n  notification: string;\n  publicationDate: string;\n  features: Array<{\n    categories: Array<{\n      color: string;\n      name: string;\n    }>;\n    description: string;\n    readMore?: string;\n  }>;\n}\n\nconst PRISMIC_API_URL = 'https://sonarsource.cdn.prismic.io/api/v2';\n\nexport function fetchPrismicRefs() {\n  return getCorsJSON(PRISMIC_API_URL).then((response: { refs: PrismicRef[] }) => {\n    const master = response && response.refs.find(ref => ref.id === 'master');\n    if (!master) {\n      return Promise.reject('No master ref found');\n    }\n    return master;\n  });\n}\n\nexport function fetchPrismicNews(data: {\n  accessToken: string;\n  ps?: number;\n  ref: string;\n  tag?: string;\n}) {\n  const q = ['[[at(document.type, \"blog_sonarsource_post\")]]'];\n  if (data.tag) {\n    q.push(`[[at(document.tags,[\"${data.tag}\"])]]`);\n  }\n  return getCorsJSON(PRISMIC_API_URL + '/documents/search', {\n    access_token: data.accessToken,\n    orderings: '[document.first_publication_date desc]',\n    pageSize: data.ps || 1,\n    q,\n    ref: data.ref\n  }).then(({ results }: { results: PrismicNews[] }) => results);\n}\n\nexport function fetchPrismicFeatureNews(data: {\n  accessToken: string;\n  p?: number;\n  ps?: number;\n  ref: string;\n}): Promise<{ news: PrismicFeatureNews[]; paging: T.Paging }> {\n  return getCorsJSON(PRISMIC_API_URL + '/documents/search', {\n    access_token: data.accessToken,\n    fetchLinks: 'sc_category.color,sc_category.name',\n    orderings: '[my.sc_product_news.publication_date desc]',\n    page: data.p || 1,\n    pageSize: data.ps || 1,\n    q: ['[[at(document.type, \"sc_product_news\")]]'],\n    ref: data.ref\n  }).then(({ page, results, results_per_page, total_results_size }: PrismicResponse) => ({\n    news: results.map(result => ({\n      notification: result.data.notification,\n      publicationDate: result.data.publication_date,\n      features: result.data.body.map(feature => ({\n        categories: feature.items.map(item => item.category.data).filter(Boolean),\n        description: feature.primary.description,\n        readMore: feature.primary.read_more_link.url\n      }))\n    })),\n    paging: {\n      pageIndex: page,\n      pageSize: results_per_page,\n      total: total_results_size\n    }\n  }));\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport interface License {\n  contactEmail: string;\n  edition: string;\n  expiresAt: string;\n  isExpired: boolean;\n  isOfficialDistribution: boolean;\n  isSupported: boolean;\n  isValidEdition: boolean;\n  isValidServerId: boolean;\n  loc: number;\n  maxLoc: number;\n  plugins: string[];\n  remainingLocThreshold: number;\n  serverId: string;\n  type: string;\n}\n\nexport function isValidLicense(): Promise<{ isValidLicense: boolean }> {\n  return getJSON('/api/editions/is_valid_license');\n}\n\nexport function showLicense(): Promise<License> {\n  return getJSON('/api/editions/show_license').catch((response: Response) => {\n    if (response && response.status === 404) {\n      return undefined;\n    }\n    return throwGlobalError(response);\n  });\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { request } from 'sonar-ui-common/helpers/request';\n\nexport function login(login: string, password: string): Promise<Response> {\n  return request('/api/authentication/login')\n    .setMethod('POST')\n    .setData({ login, password })\n    .submit()\n    .then(basicCheckStatus);\n}\n\nexport function logout(): Promise<Response> {\n  return request('/api/authentication/logout')\n    .setMethod('POST')\n    .submit()\n    .then(basicCheckStatus);\n}\n\nfunction basicCheckStatus(response: Response): Promise<Response> {\n  if (response.status >= 200 && response.status < 300) {\n    return Promise.resolve(response);\n  } else {\n    return Promise.reject(response);\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getLanguages(): Promise<T.Language[]> {\n  return getJSON('/api/languages/list').then(r => r.languages, throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport getCoverageStatus from '../components/SourceViewer/helpers/getCoverageStatus';\nimport { RawIssue } from '../helpers/issues';\n\nexport interface IssueResponse {\n  components?: Array<{ key: string; name: string }>;\n  issue: RawIssue;\n  rules?: Array<{}>;\n  users?: Array<T.UserBase>;\n}\n\ninterface IssuesResponse {\n  components?: { key: string; organization: string; name: string }[];\n  effortTotal: number;\n  facets: Array<{\n    property: string;\n    values: { count: number; val: string }[];\n  }>;\n  issues: RawIssue[];\n  paging: T.Paging;\n  rules?: Array<{}>;\n  users?: Array<T.UserBase>;\n}\n\ntype FacetName =\n  | 'assigned_to_me'\n  | 'assignees'\n  | 'authors'\n  | 'createdAt'\n  | 'cwe'\n  | 'directories'\n  | 'files'\n  | 'languages'\n  | 'modules'\n  | 'owaspTop10'\n  | 'projects'\n  | 'reporters'\n  | 'resolutions'\n  | 'rules'\n  | 'sansTop25'\n  | 'severities'\n  | 'statuses'\n  | 'tags'\n  | 'types';\n\nexport function searchIssues(query: RequestData): Promise<IssuesResponse> {\n  return getJSON('/api/issues/search', query);\n}\n\nexport function getFacets(\n  query: RequestData,\n  facets: FacetName[]\n): Promise<{\n  facets: Array<{ property: string; values: T.FacetValue[] }>;\n  response: IssuesResponse;\n}> {\n  const data = {\n    ...query,\n    facets: facets.join(),\n    ps: 1,\n    additionalFields: '_all'\n  };\n  return searchIssues(data).then(r => {\n    return { facets: r.facets, response: r };\n  });\n}\n\nexport function getFacet(\n  query: RequestData,\n  facet: FacetName\n): Promise<{ facet: { count: number; val: string }[]; response: IssuesResponse }> {\n  return getFacets(query, [facet]).then(r => {\n    return { facet: r.facets[0].values, response: r.response };\n  });\n}\n\nexport function searchIssueTags(data: {\n  organization?: string;\n  project?: string;\n  ps?: number;\n  q?: string;\n}): Promise<string[]> {\n  return getJSON('/api/issues/tags', data)\n    .then(r => r.tags)\n    .catch(throwGlobalError);\n}\n\nexport function getIssueChangelog(issue: string): Promise<{ changelog: T.IssueChangelog[] }> {\n  return getJSON('/api/issues/changelog', { issue }).catch(throwGlobalError);\n}\n\nexport function getIssueFilters() {\n  return getJSON('/api/issue_filters/search').then(r => r.issueFilters);\n}\n\nexport function addIssueComment(data: { issue: string; text: string }): Promise<IssueResponse> {\n  return postJSON('/api/issues/add_comment', data);\n}\n\nexport function deleteIssueComment(data: { comment: string }): Promise<IssueResponse> {\n  return postJSON('/api/issues/delete_comment', data);\n}\n\nexport function editIssueComment(data: { comment: string; text: string }): Promise<IssueResponse> {\n  return postJSON('/api/issues/edit_comment', data);\n}\n\nexport function setIssueAssignee(data: {\n  issue: string;\n  assignee?: string;\n}): Promise<IssueResponse> {\n  return postJSON('/api/issues/assign', data);\n}\n\nexport function setIssueSeverity(data: { issue: string; severity: string }): Promise<any> {\n  return postJSON('/api/issues/set_severity', data);\n}\n\nexport function setIssueTags(data: { issue: string; tags: string }): Promise<IssueResponse> {\n  return postJSON('/api/issues/set_tags', data);\n}\n\nexport function setIssueTransition(data: {\n  issue: string;\n  transition: string;\n}): Promise<IssueResponse> {\n  return postJSON('/api/issues/do_transition', data);\n}\n\nexport function setIssueType(data: { issue: string; type: string }): Promise<IssueResponse> {\n  return postJSON('/api/issues/set_type', data);\n}\n\nexport function bulkChangeIssues(issueKeys: string[], query: RequestData): Promise<void> {\n  return post('/api/issues/bulk_change', { issues: issueKeys.join(), ...query });\n}\n\nexport function searchIssueAuthors(data: {\n  organization?: string;\n  project?: string;\n  ps?: number;\n  q?: string;\n}): Promise<string[]> {\n  return getJSON('/api/issues/authors', data).then(r => r.authors, throwGlobalError);\n}\n\nexport function getIssueFlowSnippets(issueKey: string): Promise<T.Dict<T.SnippetsByComponent>> {\n  return getJSON('/api/sources/issue_snippets', { issueKey }).then(result => {\n    Object.keys(result).forEach(k => {\n      if (result[k].sources) {\n        result[k].sources = result[k].sources.reduce(\n          (lineMap: T.Dict<T.SourceLine>, line: T.SourceLine) => {\n            line.coverageStatus = getCoverageStatus(line);\n            lineMap[line.line] = line;\n            return lineMap;\n          },\n          {}\n        );\n      }\n    });\n    return result;\n  });\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\nimport { ComponentQualifier } from '../types/component';\n\nexport interface BaseSearchProjectsParameters {\n  analyzedBefore?: string;\n  onProvisionedOnly?: boolean;\n  organization: string;\n  projects?: string;\n  q?: string;\n  qualifiers?: string;\n  visibility?: T.Visibility;\n}\n\nexport interface ProjectBase {\n  key: string;\n  name: string;\n  qualifier: string;\n  visibility: T.Visibility;\n}\n\nexport interface Project extends ProjectBase {\n  id: string;\n  lastAnalysisDate?: string;\n  organization: string;\n}\n\nexport interface SearchProjectsParameters extends BaseSearchProjectsParameters {\n  p?: number;\n  ps?: number;\n}\n\nexport function getComponents(\n  parameters: SearchProjectsParameters\n): Promise<{\n  components: Project[];\n  paging: T.Paging;\n}> {\n  return getJSON('/api/projects/search', parameters);\n}\n\nexport function bulkDeleteProjects(\n  parameters: BaseSearchProjectsParameters\n): Promise<void | Response> {\n  return post('/api/projects/bulk_delete', parameters).catch(throwGlobalError);\n}\n\nexport function deleteProject(project: string): Promise<void | Response> {\n  return post('/api/projects/delete', { project }).catch(throwGlobalError);\n}\n\nexport function deletePortfolio(portfolio: string): Promise<void | Response> {\n  return post('/api/views/delete', { key: portfolio }).catch(throwGlobalError);\n}\n\nexport function createProject(data: {\n  name: string;\n  project: string;\n  organization?: string;\n  visibility?: T.Visibility;\n}): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/projects/create', data).catch(throwGlobalError);\n}\n\nexport function searchProjectTags(data?: { ps?: number; q?: string }): Promise<any> {\n  return getJSON('/api/project_tags/search', data).catch(throwGlobalError);\n}\n\nexport function setApplicationTags(data: { application: string; tags: string }): Promise<void> {\n  return post('/api/applications/set_tags', data);\n}\n\nexport function setProjectTags(data: { project: string; tags: string }): Promise<void> {\n  return post('/api/project_tags/set', data);\n}\n\nexport function getComponentTree(\n  strategy: string,\n  component: string,\n  metrics: string[] = [],\n  additional: RequestData = {}\n): Promise<{\n  baseComponent: T.ComponentMeasure;\n  components: T.ComponentMeasure[];\n  metrics: T.Metric[];\n  paging: T.Paging;\n}> {\n  const url = '/api/measures/component_tree';\n  const data = { ...additional, component, metricKeys: metrics.join(','), strategy };\n  return getJSON(url, data).catch(throwGlobalError);\n}\n\nexport function getChildren(\n  component: string,\n  metrics: string[] = [],\n  additional: RequestData = {}\n) {\n  return getComponentTree('children', component, metrics, additional);\n}\n\nexport function getComponentLeaves(\n  component: string,\n  metrics: string[] = [],\n  additional: RequestData = {}\n) {\n  return getComponentTree('leaves', component, metrics, additional);\n}\n\nexport function getComponent(\n  data: { component: string; metricKeys: string } & BranchParameters\n): Promise<{ component: T.ComponentMeasure }> {\n  return getJSON('/api/measures/component', data);\n}\n\nexport interface TreeComponent extends T.LightComponent {\n  id?: string;\n  name: string;\n  path?: string;\n  refId?: string;\n  refKey?: string;\n  tags?: string[];\n  visibility: T.Visibility;\n}\n\nexport interface TreeComponentWithPath extends TreeComponent {\n  path: string;\n}\n\ntype GetTreeParams = {\n  asc?: boolean;\n  component: string;\n  p?: number;\n  ps?: number;\n  q?: string;\n  s?: string;\n  strategy?: 'all' | 'leaves' | 'children';\n} & BranchParameters;\n\nexport function getTree<T = TreeComponent>(\n  data: GetTreeParams & { qualifiers?: string }\n): Promise<{ baseComponent: TreeComponent; components: T[]; paging: T.Paging }> {\n  return getJSON('/api/components/tree', data).catch(throwGlobalError);\n}\n\nexport function getFiles(data: GetTreeParams) {\n  return getTree<TreeComponentWithPath>({ ...data, qualifiers: 'FIL' });\n}\n\nexport function getDirectories(data: GetTreeParams) {\n  return getTree<TreeComponentWithPath>({ ...data, qualifiers: 'DIR' });\n}\n\nexport function getComponentData(data: { component: string } & BranchParameters): Promise<any> {\n  return getJSON('/api/components/show', data);\n}\n\nexport function doesComponentExists(\n  data: { component: string } & BranchParameters\n): Promise<boolean> {\n  return getComponentData(data).then(\n    ({ component }) => component !== undefined,\n    () => false\n  );\n}\n\nexport function getComponentShow(data: { component: string } & BranchParameters): Promise<any> {\n  return getComponentData(data).catch(throwGlobalError);\n}\n\nexport function getParents(component: string): Promise<any> {\n  return getComponentShow({ component }).then(r => r.ancestors);\n}\n\nexport function getBreadcrumbs(data: { component: string } & BranchParameters): Promise<any> {\n  return getComponentShow(data).then(r => {\n    const reversedAncestors = [...r.ancestors].reverse();\n    return [...reversedAncestors, r.component];\n  });\n}\n\nexport function getMyProjects(data: {\n  p?: number;\n  ps?: number;\n}): Promise<{ paging: T.Paging; projects: T.MyProject[] }> {\n  return getJSON('/api/projects/search_my_projects', data);\n}\n\nexport interface Component {\n  organization: string;\n  id: string;\n  key: string;\n  name: string;\n  isFavorite?: boolean;\n  analysisDate?: string;\n  qualifier: ComponentQualifier;\n  tags: string[];\n  visibility: T.Visibility;\n  leakPeriodDate?: string;\n}\n\nexport interface Facet {\n  property: string;\n  values: Array<{ val: string; count: number }>;\n}\n\nexport function searchProjects(\n  data: RequestData\n): Promise<{\n  components: Component[];\n  facets: Facet[];\n  organizations: Array<{ key: string; name: string }>;\n  paging: T.Paging;\n}> {\n  const url = '/api/components/search_projects';\n  return getJSON(url, data);\n}\n\nexport function searchComponents(data?: {\n  q?: string;\n  qualifiers?: string;\n  ps?: number;\n}): Promise<any> {\n  return getJSON('/api/components/search', data);\n}\n\nexport function changeKey(data: { from: string; to: string }) {\n  return post('/api/projects/update_key', data).catch(throwGlobalError);\n}\n\nexport interface SuggestionsResponse {\n  organizations: Array<{ key: string; name: string }>;\n  projects: Array<{ key: string; name: string }>;\n  results: Array<{\n    items: Array<{\n      isFavorite: boolean;\n      isRecentlyBrowsed: boolean;\n      key: string;\n      match: string;\n      name: string;\n      organization: string;\n      project: string;\n    }>;\n    more: number;\n    q: string;\n  }>;\n  warning?: string;\n}\n\nexport function getSuggestions(\n  query?: string,\n  recentlyBrowsed?: string[],\n  more?: string\n): Promise<SuggestionsResponse> {\n  const data: RequestData = {};\n  if (query) {\n    data.s = query;\n  }\n  if (recentlyBrowsed) {\n    data.recentlyBrowsed = recentlyBrowsed.join();\n  }\n  if (more) {\n    data.more = more;\n  }\n  return getJSON('/api/components/suggestions', data).catch(throwGlobalError);\n}\n\nexport function getComponentForSourceViewer(\n  data: { component: string } & BranchParameters\n): Promise<T.SourceViewerFile> {\n  return getJSON('/api/components/app', data);\n}\n\nexport function getSources(\n  data: { key: string; from?: number; to?: number } & BranchParameters\n): Promise<T.SourceLine[]> {\n  return getJSON('/api/sources/lines', data).then(r => r.sources);\n}\n\nexport function getDuplications(\n  data: { key: string } & BranchParameters\n): Promise<{ duplications: T.Duplication[]; files: T.Dict<T.DuplicatedFile> }> {\n  return getJSON('/api/duplications/show', data).catch(throwGlobalError);\n}\n\nexport function getTests(\n  data: { sourceFileKey: string; sourceFileLineNumber: number | string } & BranchParameters\n): Promise<any> {\n  return getJSON('/api/tests/list', data).then(r => r.tests);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getCurrentUser(): Promise<T.CurrentUser> {\n  return getJSON('/api/users/current');\n}\n\nexport function changePassword(data: {\n  login: string;\n  password: string;\n  previousPassword?: string;\n}) {\n  return post('/api/users/change_password', data).catch(throwGlobalError);\n}\n\nexport interface UserGroup {\n  default: boolean;\n  description: string;\n  id: number;\n  name: string;\n  selected: boolean;\n}\n\nexport function getUserGroups(data: {\n  login: string;\n  organization?: string;\n  p?: number;\n  ps?: number;\n  q?: string;\n  selected?: string;\n}): Promise<{ paging: T.Paging; groups: UserGroup[] }> {\n  return getJSON('/api/users/groups', data);\n}\n\nexport function getIdentityProviders(): Promise<{ identityProviders: T.IdentityProvider[] }> {\n  return getJSON('/api/users/identity_providers').catch(throwGlobalError);\n}\n\nexport function searchUsers(data: {\n  p?: number;\n  ps?: number;\n  q?: string;\n}): Promise<{ paging: T.Paging; users: T.User[] }> {\n  data.q = data.q || undefined;\n  return getJSON('/api/users/search', data).catch(throwGlobalError);\n}\n\nexport function createUser(data: {\n  email?: string;\n  local?: boolean;\n  login: string;\n  name: string;\n  password?: string;\n  scmAccount: string[];\n}): Promise<void | Response> {\n  return post('/api/users/create', data);\n}\n\nexport function updateUser(data: {\n  email?: string;\n  login: string;\n  name?: string;\n  scmAccount: string[];\n}): Promise<T.User> {\n  return postJSON('/api/users/update', {\n    ...data,\n    scmAccount: data.scmAccount.length > 0 ? data.scmAccount : ''\n  });\n}\n\nexport function deactivateUser(data: { login: string }): Promise<T.User> {\n  return postJSON('/api/users/deactivate', data).catch(throwGlobalError);\n}\n\nexport function skipOnboarding(): Promise<void | Response> {\n  return post('/api/users/skip_onboarding_tutorial').catch(throwGlobalError);\n}\n\nexport function setHomePage(homepage: T.HomePage): Promise<void | Response> {\n  return post('/api/users/set_homepage', homepage).catch(throwGlobalError);\n}\n\nexport function setUserSetting(setting: T.CurrentUserSetting): Promise<void | Response> {\n  return post('/api/users/set_setting', setting).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\n\nexport function getOrganizations(data: {\n  organizations?: string;\n  member?: boolean;\n}): Promise<{\n  organizations: T.Organization[];\n  paging: T.Paging;\n}> {\n  return getJSON('/api/organizations/search', data).catch(throwGlobalError);\n}\n\nexport function getOrganization(key: string): Promise<T.Organization | undefined> {\n  return getJSON('/api/organizations/search', { organizations: key }).then(\n    r => r.organizations.find((o: T.Organization) => o.key === key),\n    throwGlobalError\n  );\n}\n\ninterface GetOrganizationNavigation {\n  adminPages: T.Extension[];\n  alm?: { key: string; membersSync: boolean; personal: boolean; url: string };\n  canUpdateProjectsVisibilityToPrivate: boolean;\n  isDefault: boolean;\n  pages: T.Extension[];\n}\n\nexport function getOrganizationNavigation(key: string): Promise<GetOrganizationNavigation> {\n  return getJSON('/api/navigation/organization', { organization: key }).then(\n    r => r.organization,\n    throwGlobalError\n  );\n}\n\nexport function getOrganizationsThatPreventDeletion(): Promise<{\n  organizations: T.Organization[];\n}> {\n  return getJSON('/api/organizations/prevent_user_deletion').catch(throwGlobalError);\n}\n\nexport function createOrganization(\n  data: T.OrganizationBase & { installationId?: string }\n): Promise<T.Organization> {\n  return postJSON('/api/organizations/create', data).then(r => r.organization, throwGlobalError);\n}\n\nexport function updateOrganization(key: string, changes: T.OrganizationBase) {\n  return post('/api/organizations/update', { key, ...changes }).catch(throwGlobalError);\n}\n\nexport function deleteOrganization(key: string) {\n  return post('/api/organizations/delete', { key }).catch(throwGlobalError);\n}\n\nexport function searchMembers(data: {\n  organization?: string;\n  p?: number;\n  ps?: number;\n  q?: string;\n  selected?: string;\n}): Promise<{ paging: T.Paging; users: T.OrganizationMember[] }> {\n  return getJSON('/api/organizations/search_members', data).catch(throwGlobalError);\n}\n\nexport function addMember(data: {\n  login: string;\n  organization: string;\n}): Promise<T.OrganizationMember> {\n  return postJSON('/api/organizations/add_member', data).then(r => r.user, throwGlobalError);\n}\n\nexport function removeMember(data: { login: string; organization: string }) {\n  return post('/api/organizations/remove_member', data).catch(throwGlobalError);\n}\n\nexport interface OrganizationBilling {\n  nclocCount: number;\n  subscription: {\n    plan?: {\n      maxNcloc: number;\n      price: number;\n    };\n    nextBillingDate?: string;\n    status: 'active' | 'inactive' | 'suspended';\n    trial: boolean;\n  };\n}\n\nexport function getOrganizationBilling(organization: string): Promise<OrganizationBilling> {\n  return getJSON('/api/billing/show', { organization, p: 1, ps: 1 });\n}\n\nexport function setOrganizationMemberSync(data: { enabled: boolean; organization: string }) {\n  return post('/api/organizations/set_members_sync', data).catch(throwGlobalError);\n}\n\nexport function syncMembers(organization: string) {\n  return post('/api/organizations/sync_members', { organization }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\nimport { QualityGateApplicationStatus, QualityGateProjectStatus } from '../types/quality-gates';\n\nexport function fetchQualityGates(data: {\n  organization?: string;\n}): Promise<{\n  actions: { create: boolean };\n  qualitygates: T.QualityGate[];\n}> {\n  return getJSON('/api/qualitygates/list', data).catch(throwGlobalError);\n}\n\nexport function fetchQualityGate(data: {\n  id: number | string;\n  organization?: string;\n}): Promise<T.QualityGate> {\n  return getJSON('/api/qualitygates/show', data).catch(throwGlobalError);\n}\n\nexport function createQualityGate(data: {\n  name: string;\n  organization?: string;\n}): Promise<T.QualityGate> {\n  return postJSON('/api/qualitygates/create', data).catch(throwGlobalError);\n}\n\nexport function deleteQualityGate(data: {\n  id: number;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/destroy', data).catch(throwGlobalError);\n}\n\nexport function renameQualityGate(data: {\n  id: number;\n  name: string;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/rename', data).catch(throwGlobalError);\n}\n\nexport function copyQualityGate(data: {\n  id: number;\n  name: string;\n  organization?: string;\n}): Promise<T.QualityGate> {\n  return postJSON('/api/qualitygates/copy', data).catch(throwGlobalError);\n}\n\nexport function setQualityGateAsDefault(data: {\n  id: number;\n  organization?: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/set_as_default', data).catch(throwGlobalError);\n}\n\nexport function createCondition(\n  data: {\n    gateId: number;\n    organization?: string;\n  } & T.Omit<T.Condition, 'id'>\n): Promise<T.Condition> {\n  return postJSON('/api/qualitygates/create_condition', data).catch(throwGlobalError);\n}\n\nexport function updateCondition(\n  data: { organization?: string } & T.Condition\n): Promise<T.Condition> {\n  return postJSON('/api/qualitygates/update_condition', data).catch(throwGlobalError);\n}\n\nexport function deleteCondition(data: { id: number; organization?: string }): Promise<void> {\n  return post('/api/qualitygates/delete_condition', data);\n}\n\nexport function getGateForProject(data: {\n  organization?: string;\n  project: string;\n}): Promise<T.QualityGate | undefined> {\n  return getJSON('/api/qualitygates/get_by_project', data).then(\n    ({ qualityGate }) =>\n      qualityGate && {\n        ...qualityGate,\n        isDefault: qualityGate.default\n      },\n    throwGlobalError\n  );\n}\n\nexport function searchProjects(data: {\n  gateId: number;\n  organization?: string;\n  page?: number;\n  pageSize?: number;\n  query?: string;\n  selected?: string;\n}): Promise<{\n  paging: T.Paging;\n  results: Array<{ key: string; name: string; selected: boolean }>;\n}> {\n  return getJSON('/api/qualitygates/search', data).catch(throwGlobalError);\n}\n\nexport function associateGateWithProject(data: {\n  gateId: number;\n  organization?: string;\n  projectKey: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/select', data).catch(throwGlobalError);\n}\n\nexport function dissociateGateWithProject(data: {\n  gateId: number;\n  organization?: string;\n  projectKey: string;\n}): Promise<void | Response> {\n  return post('/api/qualitygates/deselect', data).catch(throwGlobalError);\n}\n\nexport function getApplicationQualityGate(data: {\n  application: string;\n  branch?: string;\n  organization?: string;\n}): Promise<QualityGateApplicationStatus> {\n  return getJSON('/api/qualitygates/application_status', data).catch(throwGlobalError);\n}\n\nexport function getQualityGateProjectStatus(\n  data: {\n    projectKey?: string;\n    projectId?: string;\n  } & BranchParameters\n): Promise<QualityGateProjectStatus> {\n  return getJSON('/api/qualitygates/project_status', data)\n    .then(r => r.projectStatus)\n    .catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getJSON, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getMeasures(\n  data: { component: string; metricKeys: string } & BranchParameters\n): Promise<T.Measure[]> {\n  return getJSON('/api/measures/component', data).then(r => r.component.measures, throwGlobalError);\n}\n\ninterface MeasuresAndMetaWithMetrics {\n  component: T.ComponentMeasure;\n  metrics: T.Metric[];\n}\n\nexport function getMeasuresWithMetrics(\n  component: string,\n  metrics: string[],\n  branchParameters?: BranchParameters\n): Promise<MeasuresAndMetaWithMetrics> {\n  return getJSON('/api/measures/component', {\n    additionalFields: 'metrics',\n    component,\n    metricKeys: metrics.join(','),\n    ...branchParameters\n  }).catch(throwGlobalError);\n}\n\ninterface MeasuresAndMetaWithPeriod {\n  component: T.ComponentMeasure;\n  period: T.Period;\n}\n\nexport function getMeasuresWithPeriod(\n  component: string,\n  metrics: string[],\n  branchParameters?: BranchParameters\n): Promise<MeasuresAndMetaWithPeriod> {\n  return getJSON('/api/measures/component', {\n    additionalFields: 'period',\n    component,\n    metricKeys: metrics.join(','),\n    ...branchParameters\n  }).catch(throwGlobalError);\n}\n\nexport function getMeasuresWithPeriodAndMetrics(\n  component: string,\n  metrics: string[],\n  branchParameters?: BranchParameters\n): Promise<MeasuresAndMetaWithPeriod & MeasuresAndMetaWithMetrics> {\n  return getJSON('/api/measures/component', {\n    additionalFields: 'period,metrics',\n    component,\n    metricKeys: metrics.join(','),\n    ...branchParameters\n  }).catch(throwGlobalError);\n}\n\ninterface MeasuresForProjects {\n  component: string;\n  metric: string;\n  periods?: T.PeriodMeasure[];\n  value?: string;\n}\n\nexport function getMeasuresForProjects(\n  projectKeys: string[],\n  metricKeys: string[]\n): Promise<MeasuresForProjects[]> {\n  return getJSON('/api/measures/search', {\n    projectKeys: projectKeys.join(),\n    metricKeys: metricKeys.join()\n  }).then(r => r.measures);\n}\n\nexport function getCustomMeasures(data: {\n  f?: string;\n  p?: number;\n  projectKey: string;\n  ps?: number;\n}): Promise<{ customMeasures: T.CustomMeasure[]; paging: T.Paging }> {\n  return getJSON('/api/custom_measures/search', data).then(\n    r =>\n      ({\n        customMeasures: r.customMeasures,\n        paging: { pageIndex: r.p, pageSize: r.ps, total: r.total }\n      } as any),\n    throwGlobalError\n  );\n}\n\nexport function createCustomMeasure(data: {\n  description?: string;\n  metricKey: string;\n  projectKey: string;\n  value: string;\n}): Promise<T.CustomMeasure> {\n  return postJSON('/api/custom_measures/create', data).catch(throwGlobalError);\n}\n\nexport function updateCustomMeasure(data: { description?: string; id: string; value?: string }) {\n  return post('/api/custom_measures/update', data).catch(throwGlobalError);\n}\n\nexport function deleteCustomMeasure(data: { id: string }) {\n  return post('/api/custom_measures/delete', data).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { omitBy } from 'lodash';\nimport { getJSON, post, postJSON, RequestData } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport { isCategoryDefinition } from '../apps/settings/utils';\nimport { BranchParameters } from '../types/branch-like';\n\nexport function getDefinitions(component?: string): Promise<T.SettingCategoryDefinition[]> {\n  return getJSON('/api/settings/list_definitions', { component }).then(\n    r => r.definitions,\n    throwGlobalError\n  );\n}\n\nexport function getValues(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<T.SettingValue[]> {\n  return getJSON('/api/settings/values', data).then(r => r.settings);\n}\n\nexport function setSettingValue(\n  definition: T.SettingDefinition,\n  value: any,\n  component?: string\n): Promise<void> {\n  const { key } = definition;\n  const data: RequestData = { key, component };\n\n  if (isCategoryDefinition(definition) && definition.multiValues) {\n    data.values = value;\n  } else if (definition.type === 'PROPERTY_SET') {\n    data.fieldValues = value\n      .map((fields: any) => omitBy(fields, value => value == null))\n      .map(JSON.stringify);\n  } else {\n    data.value = value;\n  }\n\n  return post('/api/settings/set', data);\n}\n\nexport function setSimpleSettingValue(\n  data: { component?: string; value: string; key: string } & BranchParameters\n): Promise<void | Response> {\n  return post('/api/settings/set', data).catch(throwGlobalError);\n}\n\nexport function resetSettingValue(\n  data: { keys: string; component?: string } & BranchParameters\n): Promise<void> {\n  return post('/api/settings/reset', data);\n}\n\nexport function sendTestEmail(to: string, subject: string, message: string): Promise<void> {\n  return post('/api/emails/send', { to, subject, message });\n}\n\nexport function checkSecretKey(): Promise<{ secretKeyAvailable: boolean }> {\n  return getJSON('/api/settings/check_secret_key').catch(throwGlobalError);\n}\n\nexport function generateSecretKey(): Promise<{ secretKey: string }> {\n  return postJSON('/api/settings/generate_secret_key').catch(throwGlobalError);\n}\n\nexport function encryptValue(value: string): Promise<{ encryptedValue: string }> {\n  return postJSON('/api/settings/encrypt', { value }).catch(throwGlobalError);\n}\n"],"sourceRoot":""}