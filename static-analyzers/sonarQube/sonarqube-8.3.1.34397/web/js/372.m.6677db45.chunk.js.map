{"version":3,"sources":["webpack:///./src/main/js/apps/coding-rules/components/ActivationFormModal.tsx","webpack:///./src/main/js/components/shared/SeverityHelper.tsx"],"names":["ActivationFormModal","props","super","mounted","getParams","activation","rule","this","params","param","key","defaultValue","value","getQualityProfilesWithDepth","profiles","filter","profile","isBuiltIn","actions","edit","language","lang","map","depth","handleFormSubmit","event","preventDefault","setState","submitting","data","state","organization","severity","then","onDone","onClose","handleParameterChange","name","currentTarget","handleProfileChange","handleSeverityChange","renderSeverityOption","profilesWithDepth","length","isCustomRule","templateKey","activeInAllProfiles","isUpdateMode","contentLabel","modalHeader","onRequestClose","size","onSubmit","className","variant","clearable","disabled","onChange","options","label","repeat","optionRenderer","searchable","valueRenderer","title","type","placeholder","rows","dangerouslySetInnerHTML","__html","htmlDesc","onClick","SeverityHelper"],"mappings":"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","file":"js/372.m.6677db45.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport Select from 'sonar-ui-common/components/controls/Select';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { activateRule, Profile } from '../../../api/quality-profiles';\nimport SeverityHelper from '../../../components/shared/SeverityHelper';\nimport { SEVERITIES } from '../../../helpers/constants';\nimport { sortProfiles } from '../../quality-profiles/utils';\n\ninterface Props {\n  activation?: T.RuleActivation;\n  modalHeader: string;\n  onClose: () => void;\n  onDone: (severity: string) => Promise<void>;\n  organization: string | undefined;\n  profiles: Profile[];\n  rule: T.Rule | T.RuleDetails;\n}\n\ninterface State {\n  params: T.Dict<string>;\n  profile: string;\n  severity: string;\n  submitting: boolean;\n}\n\nexport default class ActivationFormModal extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    const profilesWithDepth = this.getQualityProfilesWithDepth(props);\n    this.state = {\n      params: this.getParams(props),\n      profile: profilesWithDepth.length > 0 ? profilesWithDepth[0].key : '',\n      severity: props.activation ? props.activation.severity : props.rule.severity,\n      submitting: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  getParams = ({ activation, rule } = this.props) => {\n    const params: T.Dict<string> = {};\n    if (rule && rule.params) {\n      for (const param of rule.params) {\n        params[param.key] = param.defaultValue || '';\n      }\n      if (activation && activation.params) {\n        for (const param of activation.params) {\n          params[param.key] = param.value;\n        }\n      }\n    }\n    return params;\n  };\n\n  // Choose QP which a user can administrate, which are the same language and which are not built-in\n  getQualityProfilesWithDepth = ({ profiles } = this.props) => {\n    return sortProfiles(\n      profiles.filter(\n        profile =>\n          !profile.isBuiltIn &&\n          profile.actions &&\n          profile.actions.edit &&\n          profile.language === this.props.rule.lang\n      )\n    ).map(profile => ({\n      ...profile,\n      // Decrease depth by 1, so the top level starts at 0\n      depth: profile.depth - 1\n    }));\n  };\n\n  handleFormSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ submitting: true });\n    const data = {\n      key: this.state.profile,\n      organization: this.props.organization,\n      params: this.state.params,\n      rule: this.props.rule.key,\n      severity: this.state.severity\n    };\n    activateRule(data)\n      .then(() => this.props.onDone(data.severity))\n      .then(\n        () => {\n          if (this.mounted) {\n            this.setState({ submitting: false });\n            this.props.onClose();\n          }\n        },\n        () => {\n          if (this.mounted) {\n            this.setState({ submitting: false });\n          }\n        }\n      );\n  };\n\n  handleParameterChange = (event: React.SyntheticEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.currentTarget;\n    this.setState((state: State) => ({ params: { ...state.params, [name]: value } }));\n  };\n\n  handleProfileChange = ({ value }: { value: string }) => {\n    this.setState({ profile: value });\n  };\n\n  handleSeverityChange = ({ value }: { value: string }) => {\n    this.setState({ severity: value });\n  };\n\n  renderSeverityOption = ({ value }: { value: string }) => {\n    return <SeverityHelper severity={value} />;\n  };\n\n  render() {\n    const { activation, rule } = this.props;\n    const { profile, severity, submitting } = this.state;\n    const { params = [] } = rule;\n    const profilesWithDepth = this.getQualityProfilesWithDepth();\n    const isCustomRule = !!(rule as T.RuleDetails).templateKey;\n    const activeInAllProfiles = profilesWithDepth.length <= 0;\n    const isUpdateMode = !!activation;\n\n    return (\n      <Modal contentLabel={this.props.modalHeader} onRequestClose={this.props.onClose} size=\"small\">\n        <form onSubmit={this.handleFormSubmit}>\n          <div className=\"modal-head\">\n            <h2>{this.props.modalHeader}</h2>\n          </div>\n\n          <div className={classNames('modal-body', { 'modal-container': params.length > 0 })}>\n            {!isUpdateMode && activeInAllProfiles && (\n              <Alert variant=\"info\">{translate('coding_rules.active_in_all_profiles')}</Alert>\n            )}\n\n            <div className=\"modal-field\">\n              <label>{translate('coding_rules.quality_profile')}</label>\n              <Select\n                className=\"js-profile\"\n                clearable={false}\n                disabled={submitting || profilesWithDepth.length === 1}\n                onChange={this.handleProfileChange}\n                options={profilesWithDepth.map(profile => ({\n                  label: '   '.repeat(profile.depth) + profile.name,\n                  value: profile.key\n                }))}\n                value={profile}\n              />\n            </div>\n            <div className=\"modal-field\">\n              <label>{translate('severity')}</label>\n              <Select\n                className=\"js-severity\"\n                clearable={false}\n                disabled={submitting}\n                onChange={this.handleSeverityChange}\n                optionRenderer={this.renderSeverityOption}\n                options={SEVERITIES.map(severity => ({\n                  label: translate('severity', severity),\n                  value: severity\n                }))}\n                searchable={false}\n                value={severity}\n                valueRenderer={this.renderSeverityOption}\n              />\n            </div>\n            {isCustomRule ? (\n              <div className=\"modal-field\">\n                <p className=\"note\">{translate('coding_rules.custom_rule.activation_notice')}</p>\n              </div>\n            ) : (\n              params.map(param => (\n                <div className=\"modal-field\" key={param.key}>\n                  <label title={param.key}>{param.key}</label>\n                  {param.type === 'TEXT' ? (\n                    <textarea\n                      disabled={submitting}\n                      name={param.key}\n                      onChange={this.handleParameterChange}\n                      placeholder={param.defaultValue}\n                      rows={3}\n                      value={this.state.params[param.key] || ''}\n                    />\n                  ) : (\n                    <input\n                      disabled={submitting}\n                      name={param.key}\n                      onChange={this.handleParameterChange}\n                      placeholder={param.defaultValue}\n                      type=\"text\"\n                      value={this.state.params[param.key] || ''}\n                    />\n                  )}\n                  <div\n                    className=\"note\"\n                    // Safe: defined by rule creator (instance admin?)\n                    dangerouslySetInnerHTML={{ __html: param.htmlDesc || '' }}\n                  />\n                </div>\n              ))\n            )}\n          </div>\n\n          <footer className=\"modal-foot\">\n            {submitting && <i className=\"spinner spacer-right\" />}\n            <SubmitButton disabled={submitting || activeInAllProfiles}>\n              {isUpdateMode ? translate('save') : translate('coding_rules.activate')}\n            </SubmitButton>\n            <ResetButtonLink disabled={submitting} onClick={this.props.onClose}>\n              {translate('cancel')}\n            </ResetButtonLink>\n          </footer>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport SeverityIcon from 'sonar-ui-common/components/icons/SeverityIcon';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  className?: string;\n  severity: string;\n}\n\nexport default function SeverityHelper({ className, severity }: Props) {\n  if (!severity) {\n    return null;\n  }\n  return (\n    <span className={className}>\n      <SeverityIcon className=\"little-spacer-right\" severity={severity} />\n      {translate('severity', severity)}\n    </span>\n  );\n}\n"],"sourceRoot":""}