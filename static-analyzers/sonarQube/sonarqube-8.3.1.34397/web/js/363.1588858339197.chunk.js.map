{"version":3,"sources":["webpack:///./src/main/js/app/components/extensions/OrganizationPageExtension.tsx","webpack:///./src/main/js/helpers/extensions.ts","webpack:///./src/main/js/app/components/SimpleContainer.tsx","webpack:///./src/main/js/app/components/NotFound.tsx","webpack:///./src/main/js/app/components/extensions/Extension.tsx"],"names":["refreshOrganization","props","organization","fetchOrganization","key","render","extensionKey","pluginKey","actions","pages","admin","adminPages","concat","extension","find","p","options","this","withContainer","mapDispatchToProps","state","ownProps","params","organizationKey","OrganizationPageExtension","librariesExposed","installScript","url","target","Promise","resolve","scriptTag","document","createElement","src","onload","getElementsByTagName","appendChild","getExtensionStart","fromCache","exposeLibraries","default","start","reject","SimpleContainer","children","className","id","height","globalNavHeightRaw","NotFound","Container","defaultTitle","defer","to","handleStart","store","result","el","container","currentUser","intl","location","router","theme","setState","extensionElement","stop","handleFailure","onFail","componentDidMount","startExtension","componentDidUpdate","prevProps","stopExtension","componentWillUnmount","then","undefined","title","name","ref","Extension"],"mappings":"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","file":"js/363.1588858339197.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchOrganization } from '../../../store/rootActions';\nimport { getOrganizationByKey, Store } from '../../../store/rootReducer';\nimport NotFound from '../NotFound';\nimport Extension from './Extension';\n\ninterface StateToProps {\n  organization?: T.Organization;\n}\n\ninterface DispatchProps {\n  fetchOrganization: (organizationKey: string) => void;\n}\n\ninterface OwnProps {\n  location: {};\n  params: {\n    extensionKey: string;\n    organizationKey: string;\n    pluginKey: string;\n  };\n}\n\ntype Props = OwnProps & StateToProps & DispatchProps;\n\nclass OrganizationPageExtension extends React.PureComponent<Props> {\n  refreshOrganization = () => {\n    return this.props.organization && this.props.fetchOrganization(this.props.organization.key);\n  };\n\n  render() {\n    const { extensionKey, pluginKey } = this.props.params;\n    const { organization } = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    const { actions = {} } = organization;\n    let { pages = [] } = organization;\n    if (actions.admin && organization.adminPages) {\n      pages = pages.concat(organization.adminPages);\n    }\n\n    const extension = pages.find(p => p.key === `${pluginKey}/${extensionKey}`);\n    return extension ? (\n      <Extension\n        extension={extension}\n        options={{ organization, refreshOrganization: this.refreshOrganization }}\n      />\n    ) : (\n      <NotFound withContainer={false} />\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store, ownProps: OwnProps) => ({\n  organization: getOrganizationByKey(state, ownProps.params.organizationKey)\n});\n\nconst mapDispatchToProps = { fetchOrganization };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrganizationPageExtension);\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { getExtensionFromCache } from './extensionsHandler';\n\nlet librariesExposed = false;\n\nexport function installScript(url: string, target: 'body' | 'head' = 'body'): Promise<any> {\n  return new Promise(resolve => {\n    const scriptTag = document.createElement('script');\n    scriptTag.src = `${getBaseUrl()}${url}`;\n    scriptTag.onload = resolve;\n    document.getElementsByTagName(target)[0].appendChild(scriptTag);\n  });\n}\n\nexport async function getExtensionStart(key: string) {\n  const fromCache = getExtensionFromCache(key);\n  if (fromCache) {\n    return Promise.resolve(fromCache);\n  }\n\n  if (!librariesExposed) {\n    // Async import allows to reduce initial vendor bundle size\n    const exposeLibraries = (await import('../app/components/extensions/exposeLibraries')).default;\n    exposeLibraries();\n    librariesExposed = true;\n  }\n\n  await installScript(`/static/${key}.js`);\n\n  const start = getExtensionFromCache(key);\n  if (start) {\n    return start;\n  }\n  return Promise.reject();\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport NavBar from 'sonar-ui-common/components/ui/NavBar';\nimport { rawSizes } from '../theme';\nimport GlobalFooterContainer from './GlobalFooterContainer';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nexport default function SimpleContainer({ children }: Props) {\n  return (\n    <div className=\"global-container\">\n      <div className=\"page-wrapper\" id=\"container\">\n        <NavBar className=\"navbar-global\" height={rawSizes.globalNavHeightRaw} />\n        {children}\n      </div>\n      <GlobalFooterContainer />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Link } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport SimpleContainer from './SimpleContainer';\n\ninterface Props {\n  withContainer?: boolean;\n}\n\nexport default function NotFound({ withContainer = true }: Props) {\n  const Container = withContainer ? SimpleContainer : React.Fragment;\n  return (\n    <Container>\n      <Helmet defaultTitle={translate('404_not_found')} defer={false} />\n      <div className=\"page-wrapper-simple\" id=\"bd\">\n        <div className=\"page-simple\" id=\"nonav\">\n          <h2 className=\"big-spacer-bottom\">{translate('page_not_found')}</h2>\n          <p className=\"spacer-bottom\">{translate('address_mistyped_or_page_moved')}</p>\n          <p>\n            <Link to=\"/\">{translate('go_back_to_homepage')}</Link>\n          </p>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { InjectedIntlProps, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { Location, Router, withRouter } from '../../../components/hoc/withRouter';\nimport { getExtensionStart } from '../../../helpers/extensions';\nimport { addGlobalErrorMessage } from '../../../store/globalMessages';\nimport { getCurrentUser, Store } from '../../../store/rootReducer';\nimport * as theme from '../../theme';\nimport getStore from '../../utils/getStore';\n\ninterface Props extends InjectedIntlProps {\n  currentUser: T.CurrentUser;\n  extension: T.Extension;\n  location: Location;\n  onFail: (message: string) => void;\n  options?: T.Dict<any>;\n  router: Router;\n}\n\ninterface State {\n  extensionElement?: React.ReactElement<any>;\n}\n\nexport class Extension extends React.PureComponent<Props, State> {\n  container?: HTMLElement | null;\n  stop?: Function;\n  state: State = {};\n\n  componentDidMount() {\n    this.startExtension();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.extension !== this.props.extension) {\n      this.stopExtension();\n      this.startExtension();\n    } else if (prevProps.location !== this.props.location) {\n      this.startExtension();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopExtension();\n  }\n\n  handleStart = (start: Function) => {\n    const store = getStore();\n    const result = start({\n      store,\n      el: this.container,\n      currentUser: this.props.currentUser,\n      intl: this.props.intl,\n      location: this.props.location,\n      router: this.props.router,\n      theme,\n      ...this.props.options\n    });\n\n    if (React.isValidElement(result)) {\n      this.setState({ extensionElement: result });\n    } else {\n      this.stop = result;\n    }\n  };\n\n  handleFailure = () => {\n    this.props.onFail(translate('page_extension_failed'));\n  };\n\n  startExtension() {\n    getExtensionStart(this.props.extension.key).then(this.handleStart, this.handleFailure);\n  }\n\n  stopExtension() {\n    if (this.stop) {\n      this.stop();\n      this.stop = undefined;\n    } else {\n      this.setState({ extensionElement: undefined });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Helmet title={this.props.extension.name} />\n        {this.state.extensionElement ? (\n          this.state.extensionElement\n        ) : (\n          <div ref={container => (this.container = container)} />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: Store) => ({ currentUser: getCurrentUser(state) });\nconst mapDispatchToProps = { onFail: addGlobalErrorMessage };\n\nexport default injectIntl(withRouter(connect(mapStateToProps, mapDispatchToProps)(Extension)));\n"],"sourceRoot":""}