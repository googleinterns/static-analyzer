{"version":3,"sources":["webpack:///./src/main/js/apps/settings/encryption/EncryptionForm.tsx","webpack:///./src/main/js/apps/settings/encryption/GenerateSecretKeyForm.tsx","webpack:///./src/main/js/apps/settings/encryption/EncryptionApp.tsx"],"names":["mounted","state","encrypting","generating","value","handleChange","event","setState","currentTarget","handleEncrypt","preventDefault","then","encryptedValue","handleGenerateSecretKey","props","generateSecretKey","stopGenerating","componentDidMount","this","componentWillUnmount","render","id","className","onSubmit","autoFocus","onChange","required","rows","disabled","loading","readOnly","type","copyValue","defaultMessage","values","moreInformationLink","href","rel","target","submitting","handleSubmit","stopSubmitting","secretKey","secret_file","property","propreties_file","checkSecretKey","secretKeyAvailable","defer","title"],"mappings":"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","file":"js/397.1588858339197.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { encryptValue } from '../../../api/settings';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n}\n\ninterface State {\n  encryptedValue?: string;\n  encrypting: boolean;\n  generating: boolean;\n  value: string;\n}\n\nexport default class EncryptionForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { encrypting: false, generating: false, value: '' };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ value: event.currentTarget.value });\n  };\n\n  handleEncrypt = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ encrypting: true });\n    encryptValue(this.state.value).then(\n      ({ encryptedValue }) => {\n        if (this.mounted) {\n          this.setState({ encryptedValue, encrypting: false });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ encrypting: false });\n        }\n      }\n    );\n  };\n\n  handleGenerateSecretKey = (event: React.FormEvent) => {\n    event.preventDefault();\n    this.setState({ generating: true });\n    this.props.generateSecretKey().then(this.stopGenerating, this.stopGenerating);\n  };\n\n  stopGenerating = () => {\n    if (this.mounted) {\n      this.setState({ generating: false });\n    }\n  };\n\n  render() {\n    const { encryptedValue, encrypting, generating } = this.state;\n    return (\n      <div id=\"encryption-form-container\">\n        <div className=\"spacer-bottom\">{translate('encryption.form_intro')}</div>\n        <form className=\"big-spacer-bottom\" id=\"encryption-form\" onSubmit={this.handleEncrypt}>\n          <textarea\n            autoFocus={true}\n            className=\"abs-width-600\"\n            id=\"encryption-form-value\"\n            onChange={this.handleChange}\n            required={true}\n            rows={5}\n            value={this.state.value}\n          />\n          <div className=\"spacer-top\">\n            <SubmitButton disabled={encrypting || generating}>\n              {translate('encryption.encrypt')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={encrypting} />\n          </div>\n        </form>\n\n        {encryptedValue && (\n          <div>\n            <span className=\"little-spacer-right\">{translate('encryption.encrypted_value')}</span>\n            <input\n              className=\"input-clear input-code input-super-large\"\n              id=\"encrypted-value\"\n              readOnly={true}\n              type=\"text\"\n              value={encryptedValue}\n            />\n            <ClipboardButton className=\"little-spacer-left\" copyValue={encryptedValue} />\n          </div>\n        )}\n\n        <form\n          className=\"huge-spacer-top bordered-top\"\n          id=\"encryption-new-key-form\"\n          onSubmit={this.handleGenerateSecretKey}>\n          <p className=\"big-spacer-top spacer-bottom\">\n            <FormattedMessage\n              defaultMessage={translate('encryption.form_note')}\n              id=\"encryption.form_note\"\n              values={{\n                moreInformationLink: (\n                  <a\n                    href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    {translate('more_information')}\n                  </a>\n                )\n              }}\n            />\n          </p>\n\n          <SubmitButton disabled={generating || encrypting}>\n            {translate('encryption.generate_new_secret_key')}{' '}\n          </SubmitButton>\n          <DeferredSpinner className=\"spacer-left\" loading={generating} />\n        </form>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport { ClipboardButton } from 'sonar-ui-common/components/controls/clipboard';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\n\ninterface Props {\n  generateSecretKey: () => Promise<void>;\n  secretKey?: string;\n}\n\ninterface State {\n  submitting: boolean;\n}\n\nexport default class GenerateSecretKeyForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = { submitting: false };\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    this.setState({ submitting: true });\n    this.props.generateSecretKey().then(this.stopSubmitting, this.stopSubmitting);\n  };\n\n  stopSubmitting = () => {\n    if (this.mounted) {\n      this.setState({ submitting: false });\n    }\n  };\n\n  render() {\n    const { secretKey } = this.props;\n    const { submitting } = this.state;\n    return (\n      <div id=\"generate-secret-key-form-container\">\n        {secretKey ? (\n          <>\n            <div className=\"big-spacer-bottom\">\n              <h3 className=\"spacer-bottom\">{translate('encryption.secret_key')}</h3>\n              <input\n                className=\"input-clear input-code input-large\"\n                id=\"secret-key\"\n                readOnly={true}\n                type=\"text\"\n                value={secretKey}\n              />\n              <ClipboardButton className=\"little-spacer-left\" copyValue={secretKey} />\n            </div>\n            <h3 className=\"spacer-bottom\">{translate('encryption.how_to_use')}</h3>\n            <div className=\"markdown\">\n              <ul>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content1')}\n                    id=\"encryption.how_to_use.content1\"\n                    values={{\n                      secret_file: <code>~/.sonar/sonar-secret.txt</code>,\n                      property: <code>sonar.secretKeyPath</code>,\n                      propreties_file: <code>conf/sonar.properties</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content2')}</li>\n                <li>\n                  <FormattedMessage\n                    defaultMessage={translate('encryption.how_to_use.content3')}\n                    id=\"encryption.how_to_use.content3\"\n                    values={{\n                      property: <code>sonar.secretKeyPath</code>\n                    }}\n                  />\n                </li>\n                <li>{translate('encryption.how_to_use.content4')}</li>\n              </ul>\n            </div>\n          </>\n        ) : (\n          <form id=\"generate-secret-key-form\" onSubmit={this.handleSubmit}>\n            <p className=\"spacer-bottom\">\n              <FormattedMessage\n                defaultMessage={translate('encryption.secret_key_description')}\n                id=\"encryption.secret_key_description\"\n                values={{\n                  moreInformationLink: (\n                    <a\n                      href=\"https://redirect.sonarsource.com/doc/settings-encryption.html\"\n                      rel=\"noopener noreferrer\"\n                      target=\"_blank\">\n                      {translate('more_information')}\n                    </a>\n                  )\n                }}\n              />\n            </p>\n            <SubmitButton disabled={submitting}>\n              {translate('encryption.generate_secret_key')}\n            </SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n          </form>\n        )}\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2020 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { checkSecretKey, generateSecretKey } from '../../../api/settings';\nimport EncryptionForm from './EncryptionForm';\nimport GenerateSecretKeyForm from './GenerateSecretKeyForm';\n\ninterface State {\n  loading: boolean;\n  secretKey?: string;\n  secretKeyAvailable?: boolean;\n}\n\nexport default class EncryptionApp extends React.PureComponent<{}, State> {\n  state: State = { loading: true };\n  mounted = false;\n\n  componentDidMount() {\n    this.mounted = true;\n    this.checkSecretKey();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkSecretKey = () => {\n    checkSecretKey().then(\n      ({ secretKeyAvailable }) => {\n        if (this.mounted) {\n          this.setState({ loading: false, secretKeyAvailable });\n        }\n      },\n      () => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      }\n    );\n  };\n\n  generateSecretKey = () => {\n    return generateSecretKey().then(({ secretKey }) => {\n      if (this.mounted) {\n        this.setState({ secretKey, secretKeyAvailable: false });\n      }\n    });\n  };\n\n  render() {\n    const { loading, secretKey, secretKeyAvailable } = this.state;\n    return (\n      <div className=\"page page-limited\" id=\"encryption-page\">\n        <Helmet defer={false} title={translate('property.category.security.encryption')} />\n        <header className=\"page-header\">\n          <h1 className=\"page-title\">{translate('property.category.security.encryption')}</h1>\n          <DeferredSpinner loading={loading} />\n        </header>\n\n        {!loading && !secretKeyAvailable && (\n          <GenerateSecretKeyForm generateSecretKey={this.generateSecretKey} secretKey={secretKey} />\n        )}\n\n        {secretKeyAvailable && <EncryptionForm generateSecretKey={this.generateSecretKey} />}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}