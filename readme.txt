Description:    
    This software is a tool that integrates static analyzers together to scan provided src code and generate a general report based on the findings of the analyzers. 
The analyzers can potentially support different languages and different policies, enabling this tool to provide wide and deep scans across a repository with very little effort from the end user 

Prerequisites:  
     Python3, pip, and java


Installation: 
    The user first needs to download this repository. 
    At this point the user should be ready to go; The binary in located in the bin directory  

    The tool automatically installs the static analyzer dependencies (the static analyzers used in this tool). Here is a list of the current installations  
        SonarQube  
            sonarqube static analyzer (version 4.4.0.2170) https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
            sonarqube server which the analyzer depends on (version 8.4.1.35646) https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.4.1.35646.zip 
        Pylint 
            pylint (version 1.9.5) pip install pylint 
Usage: 
    In the bin directory there is a binary that when invoked starts the execution of the tool.  
    The invocation command can be followed by a list of options. The two special ones are:
        -r "repoPath" -> the repo option takes in the repoPath argument, which is the path to the repository of src code that should be scanned.  
        -l "listOfFiles" -> the list option takes in a listOfFiles argument, which is a space delimited list of paths to individual src code files that should be scanned. 
    These options are special because they should be used under the application of these two rules 
        1. Only one of the special options (either the -r or the -l) should be used in an invocation; not both, nor neither. 
        2. The special option that is used should be the first option listed in the invocation; 
    Violation of these two rules lead to undefined behavior   

    Other options include  
        -xt "type" -> the exclude type option takes in the type argument, which is a list of file extensions such that, 
            if the files in the set of files to be scanned has that extension, then it shouldn't be scanned. 
        -x -> the exclude option prevents files within the set of files to be scanned that are included in the excludeFile.yaml file, which is located in the data directory, from being scanned.
        -n "name" the name option takes in the name object which is the basename for the report files generated by the scans. If the option is not used then, the basename will either be the name of the repository, if the -r option is used, or the name of the first file in the list provided with -l, if the -l option is used.   
        -v If option is used a verbose report will be printed onto the CL 

    Before executing make sure that a directory named temp is not located in the data directory, it'll interfere with the program's execution  
    During the programs execution several notification and error messages may be written to the standard error. Their purpose is to inform the user of the current state of their scans and the progress of the pipeline as a whole.   

    After execution there will be three reports generated describing the results of the scans 
        1. a brief command line report that is written to standard error after execution 
        2. a verbose html report which delineates all of the issues found by the scans. This can be found in the reports directory 
        3. a verbose json report which delineates all of the issues found by the scans. This can be found in the reports directory 
    After every session of scans a new set of these three reports are generated. The latter two being files differentiated from other scans by timestamps. 

WARNINGS    
    Currently it is not recommended to run this program parallely due to certain static analyzers interacting with themselves 


More info on static analyzers and debugging 
    General 
         This tool redirects the standard error and standard output of static analyzers to their corresponding files in /data/analyzerOutput.
    SonarQube
        SonarQube as mentioned before is made of two components: the actual static analyzer and the server. 
        The server uses the localhost:9000 port and it's dependent database is using localhost:9001; So make sure these ports are open before running scans 
        If the sonarqube scan fails, additional details could be obtained by the logs located in /static-analyzers/sonarQube/sonar-scanner-4.4.0.2170-linux/sonar-scanner-debug, 
        /static-analyzers/sonarQube/sonarqube-8.4.1.35646/logs/sonar.log, /static-analyzers/sonarQube/sonarqube-8.4.1.35646/logs/es.log.  
        Also more information can be found in /data/analyzerOutput/SonarQube.json and /data/analyzerOutput/sonarQubeErr.json 
        standalone commands for the sonarqube server can be ran through the /static-analyzers/sonarQube/sonarqube-8.4.1.35646/bin/linux-x86-64/sonar.sh  
            sonar.sh status -> get status on server 
            sonar.sh start -> starts the server 
            sonar.sh stop -> stops the server
            sonar.sh ->  bring up options
    Pylint    
        If pylint scan fails, it outputs information on the error to standard error.
        So to view debugging information for pylint, you can look at /data/analyzerOutput/PyLint.json and /data/analyzerOutput/PylintErr.json 
